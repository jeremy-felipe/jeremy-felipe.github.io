---
layout: essay
type: essay
published: false
title: "Meteor Gotchas"
date: 2017-10-19
permalink: essays/meteor-gotchas.html
labels:
  - Software Engineering
  - Meteor
---

Meteor is a bit of a leap in learning to program, and I've had my fair share of problems with it. Of course, those fade with familiarity and time, after which I'm sure I'll find actual problems with it like it's limits and cpu usage or something, but for now my problems are more prioritized around understanding it and making the dang thing work.

The worst problem I had involving Meteor struck suddenly during a WOD. It was seemingly stuck on the downloading/extracting step of the meteor meteor npm install. This meant minutes spent on waiting for it to complete, followed by restarting computer and all applications and trying again. This was then followed by troubleshooting on stack overflow while people started to finish. In desperation I downloaded a repository from a previous assignment and tried to retrofit it to the WOD, but by that time there was no way and the WOD was done. This problem persisted past that time, and I had to figure out how to fix it or just accept a giant crater in my gradebook where Meteor assignments should have been. Although I’ll never be truly sure what exactly the problem was since my rash of installations and reinstallations came immediately before it, the last thing I did that preceded working again was uninstalling and reinstalling 7zip. Apparently for some people, the extractor that comes packaged with Meteorcan have issues for some ungodly reason, so I uninstalled/reinstalled my 7zip and reaffirmed the path and following a good ol’ restart, things were just fine. I mean, it’s still slow but it’s fine. 

Another problem I’ve had with meteor is some guy with white hair and a long sword keeps coming and trying to crash it into the planet.

Past that, however, it’s still difficult to quickly figure out what goes where and why. I get that some things could be wangjangled together with imports, but whenever something works it just seems like it...works somehow. I’m still not entirely sure exactly which steps we take because they’re prudent or necessary for the code (eg organizational structure, some keywords/ids) . That’s sort of a holdover issue from semantic ui where classes’ name’s matter and remembering all of them, what they do, and how they can mess with your page is a matter of pleasantness or a complete formatting nightmare. That nightmare with SemUI usually meant trying to fix one or two pixels of something being off forever until you realized you were looking at the wrong thing. The problem with Meteor is there’s so much wrong things that without being as comfortable as I’ll need to be with this eventually, finding that is difficult and time consuming. It’s a problem that is best solved with time and effort, sure, but right now it’s rather annoying. 
